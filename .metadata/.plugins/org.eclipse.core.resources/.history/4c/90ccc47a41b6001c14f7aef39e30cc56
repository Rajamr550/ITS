package com.zensar.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.dto.Stock;
import com.zensar.service.StockService;

import io.swagger.annotations.ApiOperation;

@RestController

public class StockController {
    @Autowired
    StockService aaa;

    @GetMapping(value = "/stock", produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE })
    @ApiOperation(value = "Reads all stocks", notes = "This REST API returns list of all stocks")

    public List<Stock> getAllStocks() {
	return aaa.getAllStocks();
    }

    @GetMapping(value = "/stock/{id}", produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE })
    @ApiOperation(value = "Reads specific stock", notes = "This REST API returns list the stock of given id")

    public Stock getStockById(@PathVariable("id") int stockId) {
	return aaa.getStockById(stockId);
    }

    @DeleteMapping(value = "/stock/{id}")
    @ApiOperation(value = "Deletes the stock by id", notes = "Deletes the stock by id")

    public boolean deleteStockById(@PathVariable("id") int stockId) {
	return aaa.deleteStocksById(stockId);
    }

    @DeleteMapping(value = "/stock")
    @ApiOperation(value = "Deletes the stock list", notes = "Deletes all the stock")

    public boolean deleteAllStocks() {
	return aaa.deleteAllStocks();

    }

    @PostMapping(value = "/stock", consumes = { MediaType.APPLICATION_JSON_VALUE,
	    MediaType.APPLICATION_XML_VALUE }, produces = { MediaType.APPLICATION_JSON_VALUE,
		    MediaType.APPLICATION_XML_VALUE })
    @ApiOperation(value = "create a new stock", notes = "create a stock")

    public Stock createNewStock(@RequestBody Stock stock) {
return aaa.createNewStock(stock);
    }

    @PutMapping(value = "/stock/{id}", consumes = { MediaType.APPLICATION_JSON_VALUE,
	    MediaType.APPLICATION_XML_VALUE }, produces = { MediaType.APPLICATION_JSON_VALUE,
		    MediaType.APPLICATION_XML_VALUE })
    @ApiOperation(value = "ediitng a stockc", notes = "edit a stock")

    public Stock updateStock(@PathVariable("id") int stockId, @RequestBody Stock updatedStock) {
	Stock existingStock = getStockById(stockId);
	existingStock.setName(updatedStock.getName());
	existingStock.setMarket(updatedStock.getMarket());
	existingStock.setPrice(updatedStock.getPrice());
	return existingStock;
    }

    @GetMapping(value = "/employee")
    public boolean testRequestParam(@RequestParam(value = "eid", required = false) int empId) {
	System.out.println("emp id " + empId);
	return true;
    }

    @GetMapping(value = "/employee2")
    public boolean testHeaderParam(@RequestHeader(value = "auth-token") String authToken) {
	System.out.println("Auth Token " + authToken);
	return true;
    }

}
