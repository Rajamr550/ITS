package com.olx.service;

import java.time.LocalDate;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.olx.dto.Adv;
import com.olx.entity.AdvEntity;

@Service
public class AdvServiceImpl implements AdvService {

    @Autowired
    EntityManager entityManager;// generated by jpa

    @Autowired
    ModelMapper modelMapper;

    @Override
    public Adv postAdvertise(Adv adv) {
	// TODO Auto-generated method stub
	return null;
    }

    @Override
    public Adv updateAdvertise(Adv adv) {
	// TODO Auto-generated method stub
	return null;
    }

    @Override
    public List<Adv> getAllAdvByUser() {
	// TODO Auto-generated method stub

	return null;
    }

//13.............
    @Override
    public List<Adv> searchAdvertisesByFilterCriteria(String searchText, int categoryId, String postedBy,
	    String dateCondition, LocalDate onDate, LocalDate fromDate, LocalDate toDate, String sortedBy,
	    int startIndex, int records) {

	CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	CriteriaQuery<AdvEntity> criteriaQuery = criteriaBuilder.createQuery(AdvEntity.class);
	Root<AdvEntity> rootEntity = criteriaQuery.from(AdvEntity.class);

	Predicate predicateTitle = criteriaBuilder.and();
	Predicate predicateDescription = criteriaBuilder.and();
	Predicate predicateSearchText = criteriaBuilder.and();
	Predicate predicateCategory = criteriaBuilder.and();
	Predicate predicateDateCondition = criteriaBuilder.and();
	Predicate predicatePostedBy = criteriaBuilder.and();
	Predicate predicateFinal = criteriaBuilder.and();

	if (searchText != null && !"".equalsIgnoreCase(searchText)) {
	    predicateTitle = criteriaBuilder.like(rootEntity.get("title"), "%" + searchText + "%");
	    predicateDescription = criteriaBuilder.like(rootEntity.get("description"), "%" + searchText + "%");
	    predicateSearchText = criteriaBuilder.or(predicateTitle, predicateDescription);
	}
	// Write a code to create predicates for dateConditions, categoryId, posted_by
	// etc.
	if (categoryId != 0 && categoryId < 1001) {
	    predicateCategory = criteriaBuilder.equal(rootEntity.get("id"), categoryId);

	}

	if (postedBy != null && !"".equalsIgnoreCase(postedBy)) {
	    predicatePostedBy = criteriaBuilder.equal(rootEntity.get("" + ""), postedBy);
	}
	boolean datePred = true;

	if (onDate.equals(LocalDate.now())) {
	    predicateDateCondition = criteriaBuilder.and(null);
	    datePred = false;
	}

	if (datePred) {
predicateDateCondition = criteriaBuilder.between(fromDate, LocalDate.now(),onDate);
	}

	predicateFinal = criteriaBuilder.and(predicateSearchText, predicateCategory, predicateDateCondition,
		predicatePostedBy);
	criteriaQuery.where(predicateFinal);
	TypedQuery<AdvEntity> typedQuery = entityManager.createQuery(criteriaQuery);
	typedQuery.setFirstResult(startIndex);
	typedQuery.setMaxResults(records);
	List<AdvEntity> advertiseEntityList = typedQuery.getResultList();
	return convertEntityListIntoDTOList(advertiseEntityList);
    }

    @Override
    public List<Adv> getAdvByUser() {
	// TODO Auto-generated method stub
	return null;
    }

    @Override
    public Adv SearchAdvByText(String searchText) {
	// TODO Auto-generated method stub
	return null;
    }

    @Override
    public Adv returnAdv(int id) {
	// TODO Auto-generated method stub
	return null;
    }

    private List<Adv> convertEntityListIntoDTOList(List<AdvEntity> advEntityList) {
	TypeMap<AdvEntity, Adv> tMap = modelMapper.typeMap(AdvEntity.class, Adv.class);
	List<Adv> adv = (List<Adv>) modelMapper.map(advEntityList, Adv.class);

	return adv;

    }

}
